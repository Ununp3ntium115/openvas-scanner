---
source: src/nasl/syntax/parser/tests.rs
expression: "crate :: nasl :: syntax :: parser :: tests ::\nparse_program_ok(stringify! (position),\nr#\"\n        a = 1 + 1;\n        b = 2 * 2;\n        a = ++a;\n        arr = mkarray(a, b, c      );\n        arr[++a];\n        exit(1);\n        return 1;\n        include('test.inc');\n        local_var a, b, c;\n        global_var a, b, c;\n        if (a) display(1); else display(2);\n        for (i = 1; i < 10; i++) display(i);\n        while(TRUE) display(i);\n        foreach a(q) display(a);\n        repeat display(\"q\"); until 1;\n        {\n            a;\n            b;\n        }\n        function register_packages( buf ) { return 1; }\n    \"#)"
---
[
    Assignment(
        Assignment {
            lhs: PlaceExpr {
                ident: Ident(
                    "a",
                ),
                array_accesses: [],
            },
            op: Equal,
            rhs: Binary(
                Binary {
                    lhs: Atom(
                        Literal(
                            Number(
                                1,
                            ),
                        ),
                    ),
                    op: Plus,
                    rhs: Atom(
                        Literal(
                            Number(
                                1,
                            ),
                        ),
                    ),
                },
            ),
        },
    ),
    Assignment(
        Assignment {
            lhs: PlaceExpr {
                ident: Ident(
                    "b",
                ),
                array_accesses: [],
            },
            op: Equal,
            rhs: Binary(
                Binary {
                    lhs: Atom(
                        Literal(
                            Number(
                                2,
                            ),
                        ),
                    ),
                    op: Star,
                    rhs: Atom(
                        Literal(
                            Number(
                                2,
                            ),
                        ),
                    ),
                },
            ),
        },
    ),
    Assignment(
        Assignment {
            lhs: PlaceExpr {
                ident: Ident(
                    "a",
                ),
                array_accesses: [],
            },
            op: Equal,
            rhs: Atom(
                Increment(
                    Increment {
                        expr: PlaceExpr {
                            ident: Ident(
                                "a",
                            ),
                            array_accesses: [],
                        },
                        op: PlusPlus,
                        kind: Prefix,
                    },
                ),
            ),
        },
    ),
    Assignment(
        Assignment {
            lhs: PlaceExpr {
                ident: Ident(
                    "arr",
                ),
                array_accesses: [],
            },
            op: Equal,
            rhs: Atom(
                FnCall(
                    FnCall {
                        fn_expr: Atom(
                            Ident(
                                Ident(
                                    "mkarray",
                                ),
                            ),
                        ),
                        args: CommaSeparated {
                            items: [
                                Anonymous(
                                    AnonymousFnArg {
                                        expr: Atom(
                                            Ident(
                                                Ident(
                                                    "a",
                                                ),
                                            ),
                                        ),
                                    },
                                ),
                                Anonymous(
                                    AnonymousFnArg {
                                        expr: Atom(
                                            Ident(
                                                Ident(
                                                    "b",
                                                ),
                                            ),
                                        ),
                                    },
                                ),
                                Anonymous(
                                    AnonymousFnArg {
                                        expr: Atom(
                                            Ident(
                                                Ident(
                                                    "c",
                                                ),
                                            ),
                                        ),
                                    },
                                ),
                            ],
                            delimiter: Paren,
                        },
                        num_repeats: None,
                    },
                ),
            ),
        },
    ),
    ExprStmt(
        Atom(
            ArrayAccess(
                ArrayAccess {
                    index_expr: Atom(
                        Increment(
                            Increment {
                                expr: PlaceExpr {
                                    ident: Ident(
                                        "a",
                                    ),
                                    array_accesses: [],
                                },
                                op: PlusPlus,
                                kind: Prefix,
                            },
                        ),
                    ),
                    lhs_expr: Atom(
                        Ident(
                            Ident(
                                "arr",
                            ),
                        ),
                    ),
                },
            ),
        ),
    ),
    Exit(
        Exit {
            expr: Atom(
                Literal(
                    Number(
                        1,
                    ),
                ),
            ),
        },
    ),
    Return(
        Return {
            expr: Atom(
                Literal(
                    Number(
                        1,
                    ),
                ),
            ),
        },
    ),
    Include(
        Include {
            path: Data(
                [
                    116,
                    101,
                    115,
                    116,
                    46,
                    105,
                    110,
                    99,
                ],
            ),
        },
    ),
    VarScopeDecl(
        VarScopeDecl {
            idents: [
                Ident(
                    "a",
                ),
                Ident(
                    "b",
                ),
                Ident(
                    "c",
                ),
            ],
            scope: Local,
        },
    ),
    VarScopeDecl(
        VarScopeDecl {
            idents: [
                Ident(
                    "a",
                ),
                Ident(
                    "b",
                ),
                Ident(
                    "c",
                ),
            ],
            scope: Global,
        },
    ),
    If(
        If {
            if_branches: [
                (
                    Atom(
                        Ident(
                            Ident(
                                "a",
                            ),
                        ),
                    ),
                    Block {
                        items: [
                            ExprStmt(
                                Atom(
                                    FnCall(
                                        FnCall {
                                            fn_expr: Atom(
                                                Ident(
                                                    Ident(
                                                        "display",
                                                    ),
                                                ),
                                            ),
                                            args: CommaSeparated {
                                                items: [
                                                    Anonymous(
                                                        AnonymousFnArg {
                                                            expr: Atom(
                                                                Literal(
                                                                    Number(
                                                                        1,
                                                                    ),
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ],
                                                delimiter: Paren,
                                            },
                                            num_repeats: None,
                                        },
                                    ),
                                ),
                            ),
                        ],
                    },
                ),
            ],
            else_branch: Some(
                Block {
                    items: [
                        ExprStmt(
                            Atom(
                                FnCall(
                                    FnCall {
                                        fn_expr: Atom(
                                            Ident(
                                                Ident(
                                                    "display",
                                                ),
                                            ),
                                        ),
                                        args: CommaSeparated {
                                            items: [
                                                Anonymous(
                                                    AnonymousFnArg {
                                                        expr: Atom(
                                                            Literal(
                                                                Number(
                                                                    2,
                                                                ),
                                                            ),
                                                        ),
                                                    },
                                                ),
                                            ],
                                            delimiter: Paren,
                                        },
                                        num_repeats: None,
                                    },
                                ),
                            ),
                        ),
                    ],
                },
            ),
        },
    ),
    For(
        For {
            initializer: Assignment(
                Assignment {
                    lhs: PlaceExpr {
                        ident: Ident(
                            "i",
                        ),
                        array_accesses: [],
                    },
                    op: Equal,
                    rhs: Atom(
                        Literal(
                            Number(
                                1,
                            ),
                        ),
                    ),
                },
            ),
            condition: Binary(
                Binary {
                    lhs: Atom(
                        Ident(
                            Ident(
                                "i",
                            ),
                        ),
                    ),
                    op: Less,
                    rhs: Atom(
                        Literal(
                            Number(
                                10,
                            ),
                        ),
                    ),
                },
            ),
            increment: ExprStmt(
                Atom(
                    Increment(
                        Increment {
                            expr: PlaceExpr {
                                ident: Ident(
                                    "i",
                                ),
                                array_accesses: [],
                            },
                            op: PlusPlus,
                            kind: Postfix,
                        },
                    ),
                ),
            ),
            block: Block {
                items: [
                    ExprStmt(
                        Atom(
                            FnCall(
                                FnCall {
                                    fn_expr: Atom(
                                        Ident(
                                            Ident(
                                                "display",
                                            ),
                                        ),
                                    ),
                                    args: CommaSeparated {
                                        items: [
                                            Anonymous(
                                                AnonymousFnArg {
                                                    expr: Atom(
                                                        Ident(
                                                            Ident(
                                                                "i",
                                                            ),
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ],
                                        delimiter: Paren,
                                    },
                                    num_repeats: None,
                                },
                            ),
                        ),
                    ),
                ],
            },
        },
    ),
    While(
        While {
            condition: Atom(
                Literal(
                    Boolean(
                        true,
                    ),
                ),
            ),
            block: Block {
                items: [
                    ExprStmt(
                        Atom(
                            FnCall(
                                FnCall {
                                    fn_expr: Atom(
                                        Ident(
                                            Ident(
                                                "display",
                                            ),
                                        ),
                                    ),
                                    args: CommaSeparated {
                                        items: [
                                            Anonymous(
                                                AnonymousFnArg {
                                                    expr: Atom(
                                                        Ident(
                                                            Ident(
                                                                "i",
                                                            ),
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ],
                                        delimiter: Paren,
                                    },
                                    num_repeats: None,
                                },
                            ),
                        ),
                    ),
                ],
            },
        },
    ),
    Foreach(
        Foreach {
            var: Ident(
                "a",
            ),
            array: Atom(
                Ident(
                    Ident(
                        "q",
                    ),
                ),
            ),
            block: Block {
                items: [
                    ExprStmt(
                        Atom(
                            FnCall(
                                FnCall {
                                    fn_expr: Atom(
                                        Ident(
                                            Ident(
                                                "display",
                                            ),
                                        ),
                                    ),
                                    args: CommaSeparated {
                                        items: [
                                            Anonymous(
                                                AnonymousFnArg {
                                                    expr: Atom(
                                                        Ident(
                                                            Ident(
                                                                "a",
                                                            ),
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ],
                                        delimiter: Paren,
                                    },
                                    num_repeats: None,
                                },
                            ),
                        ),
                    ),
                ],
            },
        },
    ),
    Repeat(
        Repeat {
            block: Block {
                items: [
                    ExprStmt(
                        Atom(
                            FnCall(
                                FnCall {
                                    fn_expr: Atom(
                                        Ident(
                                            Ident(
                                                "display",
                                            ),
                                        ),
                                    ),
                                    args: CommaSeparated {
                                        items: [
                                            Anonymous(
                                                AnonymousFnArg {
                                                    expr: Atom(
                                                        Literal(
                                                            String(
                                                                "q",
                                                            ),
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ],
                                        delimiter: Paren,
                                    },
                                    num_repeats: None,
                                },
                            ),
                        ),
                    ),
                ],
            },
            condition: Atom(
                Literal(
                    Number(
                        1,
                    ),
                ),
            ),
        },
    ),
    Block(
        Block {
            items: [
                ExprStmt(
                    Atom(
                        Ident(
                            Ident(
                                "a",
                            ),
                        ),
                    ),
                ),
                ExprStmt(
                    Atom(
                        Ident(
                            Ident(
                                "b",
                            ),
                        ),
                    ),
                ),
            ],
        },
    ),
    FnDecl(
        FnDecl {
            fn_name: Ident(
                "register_packages",
            ),
            args: CommaSeparated {
                items: [
                    Ident(
                        "buf",
                    ),
                ],
                delimiter: Paren,
            },
            block: Block {
                items: [
                    Return(
                        Return {
                            expr: Atom(
                                Literal(
                                    Number(
                                        1,
                                    ),
                                ),
                            ),
                        },
                    ),
                ],
            },
        },
    ),
]

---
source: src/nasl/syntax/parser/tests.rs
expression: "crate :: nasl :: syntax :: parser :: tests ::\nparse_program_ok(stringify! (operator_assignment),\n\"\n    a += 1;\n    a -= 1;\n    a /= 1;\n    a *= 1;\n    a %= 1;\n    a >>= 1;\n    a <<= 1;\n    a >>>= 1;\n    \")"
---
[
    ExprStmt(
        Assignment(
            Assignment {
                lhs: PlaceExpr {
                    ident: Ident(
                        "a",
                    ),
                    array_accesses: [],
                },
                op: PlusEqual,
                rhs: Atom(
                    Literal(
                        Number(
                            1,
                        ),
                    ),
                ),
            },
        ),
    ),
    ExprStmt(
        Assignment(
            Assignment {
                lhs: PlaceExpr {
                    ident: Ident(
                        "a",
                    ),
                    array_accesses: [],
                },
                op: MinusEqual,
                rhs: Atom(
                    Literal(
                        Number(
                            1,
                        ),
                    ),
                ),
            },
        ),
    ),
    ExprStmt(
        Assignment(
            Assignment {
                lhs: PlaceExpr {
                    ident: Ident(
                        "a",
                    ),
                    array_accesses: [],
                },
                op: SlashEqual,
                rhs: Atom(
                    Literal(
                        Number(
                            1,
                        ),
                    ),
                ),
            },
        ),
    ),
    ExprStmt(
        Assignment(
            Assignment {
                lhs: PlaceExpr {
                    ident: Ident(
                        "a",
                    ),
                    array_accesses: [],
                },
                op: StarEqual,
                rhs: Atom(
                    Literal(
                        Number(
                            1,
                        ),
                    ),
                ),
            },
        ),
    ),
    ExprStmt(
        Assignment(
            Assignment {
                lhs: PlaceExpr {
                    ident: Ident(
                        "a",
                    ),
                    array_accesses: [],
                },
                op: PercentEqual,
                rhs: Atom(
                    Literal(
                        Number(
                            1,
                        ),
                    ),
                ),
            },
        ),
    ),
    ExprStmt(
        Assignment(
            Assignment {
                lhs: PlaceExpr {
                    ident: Ident(
                        "a",
                    ),
                    array_accesses: [],
                },
                op: GreaterGreaterEqual,
                rhs: Atom(
                    Literal(
                        Number(
                            1,
                        ),
                    ),
                ),
            },
        ),
    ),
    ExprStmt(
        Assignment(
            Assignment {
                lhs: PlaceExpr {
                    ident: Ident(
                        "a",
                    ),
                    array_accesses: [],
                },
                op: LessLessEqual,
                rhs: Atom(
                    Literal(
                        Number(
                            1,
                        ),
                    ),
                ),
            },
        ),
    ),
    ExprStmt(
        Assignment(
            Assignment {
                lhs: PlaceExpr {
                    ident: Ident(
                        "a",
                    ),
                    array_accesses: [],
                },
                op: GreaterGreaterGreaterEqual,
                rhs: Atom(
                    Literal(
                        Number(
                            1,
                        ),
                    ),
                ),
            },
        ),
    ),
]

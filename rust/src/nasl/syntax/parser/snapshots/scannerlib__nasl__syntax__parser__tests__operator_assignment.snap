---
source: src/nasl/syntax/parser/tests.rs
expression: "crate :: nasl :: syntax :: parser :: tests ::\nparse_program_ok(stringify! (operator_assignment),\n\"\n    a += 1;\n    a -= 1;\n    a /= 1;\n    a *= 1;\n    a %= 1;\n    a >>= 1;\n    a <<= 1;\n    a >>>= 1;\n    \")"
---
[
    Assignment(
        Assignment {
            lhs: PlaceExpr {
                ident: Ident(
                    "a",
                ),
                array_accesses: [],
            },
            operator: PlusEqual,
            rhs: Atom(
                Literal(
                    Number(
                        1,
                    ),
                ),
            ),
        },
    ),
    Assignment(
        Assignment {
            lhs: PlaceExpr {
                ident: Ident(
                    "a",
                ),
                array_accesses: [],
            },
            operator: MinusEqual,
            rhs: Atom(
                Literal(
                    Number(
                        1,
                    ),
                ),
            ),
        },
    ),
    Assignment(
        Assignment {
            lhs: PlaceExpr {
                ident: Ident(
                    "a",
                ),
                array_accesses: [],
            },
            operator: SlashEqual,
            rhs: Atom(
                Literal(
                    Number(
                        1,
                    ),
                ),
            ),
        },
    ),
    Assignment(
        Assignment {
            lhs: PlaceExpr {
                ident: Ident(
                    "a",
                ),
                array_accesses: [],
            },
            operator: StarEqual,
            rhs: Atom(
                Literal(
                    Number(
                        1,
                    ),
                ),
            ),
        },
    ),
    Assignment(
        Assignment {
            lhs: PlaceExpr {
                ident: Ident(
                    "a",
                ),
                array_accesses: [],
            },
            operator: PercentEqual,
            rhs: Atom(
                Literal(
                    Number(
                        1,
                    ),
                ),
            ),
        },
    ),
    Assignment(
        Assignment {
            lhs: PlaceExpr {
                ident: Ident(
                    "a",
                ),
                array_accesses: [],
            },
            operator: GreaterGreaterEqual,
            rhs: Atom(
                Literal(
                    Number(
                        1,
                    ),
                ),
            ),
        },
    ),
    Assignment(
        Assignment {
            lhs: PlaceExpr {
                ident: Ident(
                    "a",
                ),
                array_accesses: [],
            },
            operator: LessLessEqual,
            rhs: Atom(
                Literal(
                    Number(
                        1,
                    ),
                ),
            ),
        },
    ),
    Assignment(
        Assignment {
            lhs: PlaceExpr {
                ident: Ident(
                    "a",
                ),
                array_accesses: [],
            },
            operator: GreaterGreaterGreaterEqual,
            rhs: Atom(
                Literal(
                    Number(
                        1,
                    ),
                ),
            ),
        },
    ),
]
